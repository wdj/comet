
Genomics metrics code: examples
-------------------------------

The following examples are run on the ORNL Titan system.

--------------------

# To build debug and release versions of the code:

cd $MEMBERWORK/stf006    #---replace stf006 with your own account id.
mkdir gm_work
cd gm_work
module load git
git clone https://code.ornl.gov/wjd/genomics_gpu.git
git checkout -q tags/v0.4   #---use currently active release tag.
#for magma_version in minproduct tally3 tally4; do
#  cd genomics_gpu/magma/magma_${magma_version}-1.6.2
#  ../make.sh
#  cd ../../..
#done
mkdir build_debug
cd build_debug
env BUILD_TYPE=Debug ../genomics_gpu/scripts/cmake.sh
../genomics_gpu/scripts/make.sh
cd ..
mkdir build_test
cd build_test
env BUILD_TYPE=Debug TESTING=ON ../genomics_gpu/scripts/cmake.sh
../genomics_gpu/scripts/make.sh
cd ..
mkdir build_release
cd build_release
env BUILD_TYPE=Release ../genomics_gpu/scripts/cmake.sh
../genomics_gpu/scripts/make.sh
cd ..
mkdir build_single_release
cd build_single_release
env FP_PRECISION=SINGLE BUILD_TYPE=Release ../genomics_gpu/scripts/cmake.sh
../genomics_gpu/scripts/make.sh

-------------------------------------------------------------------------------

genomics_metric: calculation of comparison metrics from genomics data

Usage:

    genomics_metric <option> ...

Options:

    --num_field <value>
        (Required) the number of elements in each vector

    --num_field_local <value>
        (Required) the number of elements in each vector on each processor

    --num_vector <value>
        (Required) the number of vectors to be process

    --num_vector_local <value>
        (Required) the number of vectors to be processed on each processor

    --metric_type <value>
        metric type to compute (sorenson=Sorenson (not implemented),
        czekanowski=Czekanowski (default), ccc=CCC)

    ---ccc_param <value>
        fixed coefficient value used to calculate the CCC metric
        (default floating point value is 2/3).

    --num_way <value>
        dimension of metric to compute (2=2-way (default), 3=3-way)

    --all2all <value>
        whether to perform global all-to-all rather than computing
        on each processor separately (yes=yes, no=no (default))

    --compute_method <value>
        manner of computing the result (CPU=cpu, GPU=gpu (default),
        REF=reference method)

    --num_proc_vector <value>
        blocking factor to denote number of blocks used to decompose
        the total number of vectors across processors
        (default is the total number of procs requested)

    --num_proc_field <value>
        blocking factor to denote number of blocks used to decompose
        each vector across processors (default is 1)

    --num_proc_repl <value>
        processor replication factor.  For each block along the vector
        and field axes, this number of processors is applied to
        computations for the block (default is 1)

    --num_stage <value>
        the number of stages the computation is divided into
        (default is 1) (available for 3-way case only)

    --stage_min <value>
        the lowest stage number of the sequence of stages to be computed
        for this run (default is 1)

    --stage_max <value>
        the highest stage number of the sequence of stages to be computed
        for this run (default is num_stage)

    --num_phase <value>
        the number of phases the computation is divided into
        (default is 1) (available for 2-way case only)

    --phase_min <value>
        the lowest phase number of the sequence of phases to be computed
        for this run (default is 1)

    --phase_max <value>
        the highest phase number of the sequence of phases to be computed
        for this run (default is num_phase)

    --problem_type <value>
        the kind of synthetic test case to run. Allowed choices are
        analytic (default) or random

    --output_file_stub <value>
        string denoting the filename or pathname stub of filenames
        used to store result metrics.  Metric values are stored in files
        whose names are formed by appending a unique identifier
        (e.g., processor number) to the end of this string.  If this
        option is absent, no output files are written.

    --threshold <value>
        output each result value only if its magnitude is greater than
        this threshold.  If set negative, no thresholding is done
        (default -1)

    --verbosity <value>
      verbosity level of output (0=none, 1=some (default) 2=more)

-------------------------------------------------------------------------------

# The following test runs assume:

qsub -Astf006 -I -lnodes=8 -lwalltime=2:0:0

cd $MEMBERWORK/stf006/gm_work

# The following code also assumes bash shell.

#--------------------
# Run the tester.
#--------------------
cd build_test
make test ARGS=-V

#--------------------
# Small simple cases , 2-way Czekanowski metric, no all2all.
#--------------------

for compute_method in CPU GPU ; do
  aprun -n1 ./install_debug/bin/genomics_metric \
      --num_field 2 --num_vector_local 3 \
      --compute_method $compute_method --verbosity 2
  echo
done

metrics checksum 5.00574483742923883e+05 compute time 0.000021
element (1,2): value: 9.739163e-01    [from proc 0]
element (1,3): value: 9.491587e-01    [from proc 0]
element (2,3): value: 9.752096e-01    [from proc 0]
Application 1138399 resources: utime ~0s, stime ~0s, Rss ~7200, inblocks ~809, outblocks ~1906

metrics checksum 5.00574483742923883e+05 compute time 0.002063
element (1,2): value: 9.739163e-01    [from proc 0]
element (1,3): value: 9.491587e-01    [from proc 0]
element (2,3): value: 9.752096e-01    [from proc 0]
Application 1138400 resources: utime ~0s, stime ~1s, Rss ~156828, inblocks ~827, outblocks ~1906

#--------------------
# Larger case, one processor / one GPU.
#--------------------

for compute_method in CPU GPU ; do
  aprun -n1 ./install_release/bin/genomics_metric \
      --num_field 5000 --num_vector_local 6000 \
      --compute_method $compute_method --verbosity 1
  echo
done

metrics checksum 4.28305416460411328e+12 compute time 98.327835
Application 1138401 resources: utime ~99s, stime ~1s, Rss ~522792, inblocks ~718, outblocks ~1560

metrics checksum 4.28305416460411328e+12 compute time 2.055994
Application 1138402 resources: utime ~4s, stime ~3s, Rss ~1186544, inblocks ~736, outblocks ~1560

#--------------------
# Multi-GPU, weak scaling.
#--------------------

for nproc in {1..4} ; do
  aprun -n$nproc -N1 ./install_release/bin/genomics_metric \
      --num_field 5000 --num_vector_local 6000 \
      --compute_method GPU --verbosity 1
  echo
done

metrics checksum 4.28305416460411328e+12 compute time 2.037519
Application 1138403 resources: utime ~4s, stime ~3s, Rss ~1186544, inblocks ~736, outblocks ~1560

metrics checksum 8.56610109691034961e+12 compute time 2.058392
Application 1138404 resources: utime ~8s, stime ~6s, Rss ~1192256, inblocks ~1515, outblocks ~3120

metrics checksum 1.28491546553648555e+13 compute time 2.070005
Application 1138405 resources: utime ~12s, stime ~9s, Rss ~1192264, inblocks ~2283, outblocks ~4680

metrics checksum 1.71321880172917871e+13 compute time 2.054479
Application 1138406 resources: utime ~16s, stime ~12s, Rss ~1192256, inblocks ~3051, outblocks ~6240

#--------------------
# 2-way Czekanowski metric, all2all, CPU, one core per node, strong scaling.
#--------------------

for nproc in {1..4} ; do
  num_vector_local=$(( 6000 / $nproc ))
  aprun -n$nproc -N1 ./install_release/bin/genomics_metric \
      --num_field 500 --num_vector_local $num_vector_local \
      --all2all yes --compute_method CPU --verbosity 1
  echo
done

metrics checksum 4.28265076818539453e+12 compute time 9.922352
Application 1138409 resources: utime ~10s, stime ~1s, Rss ~311868, inblocks ~718, outblocks ~1560

metrics checksum 4.28265076818591602e+12 compute time 7.444427
Application 1138410 resources: utime ~16s, stime ~2s, Rss ~247252, inblocks ~1599, outblocks ~3126

metrics checksum 4.28265076818602002e+12 compute time 2.792808
Application 1138411 resources: utime ~9s, stime ~3s, Rss ~122396, inblocks ~2410, outblocks ~4686

metrics checksum 4.28265076818575977e+12 compute time 2.571738
Application 1138412 resources: utime ~12s, stime ~4s, Rss ~118288, inblocks ~3221, outblocks ~6248

#--------------------
# 2-way Czekanowski metric, all2all, GPU, one core per node, strong scaling.
#--------------------

for nproc in {1..4} ; do
  num_vector_local=$(( 6000 / $nproc ))
  aprun -n$nproc -N1 ./install_release/bin/genomics_metric \
      --num_field 500 --num_vector_local $num_vector_local \
      --all2all yes --compute_method GPU --verbosity 1
  echo
done

metrics checksum 4.28265076818539453e+12 compute time 0.841200
Application 1147794 resources: utime ~1s, stime ~2s, Rss ~1092936, inblocks ~762, outblocks ~1619

metrics checksum 4.28265076818591602e+12 compute time 0.298465
Application 1147795 resources: utime ~2s, stime ~2s, Rss ~571224, inblocks ~1924, outblocks ~3250

metrics checksum 4.28265076818602002e+12 compute time 0.147514
Application 1147796 resources: utime ~3s, stime ~3s, Rss ~356532, inblocks ~2898, outblocks ~4869

metrics checksum 4.28265076818575977e+12 compute time 0.112496
Application 1147797 resources: utime ~4s, stime ~4s, Rss ~319392, inblocks ~3872, outblocks ~6496

#--------------------
# 2-way Czekanowski metric, all2all, GPU, one core per node, weak scaling,
# number of nodes proportional to the square of the total number of vectors
# (and asymptotically proportional to the total work).
#--------------------

for nproc_sqrt in 1 2 4 8 ; do
  nproc=$(( $nproc_sqrt * $nproc_sqrt ))
  num_field=3072
  num_vector_local=$(( 16384 / $nproc_sqrt ))
  time aprun -n$nproc -N1 $EXEC \
    --num_field $num_field --num_vector_local $num_vector_local \
    --all2all yes --compute_method $compute_method --verbosity 1
done

metrics checksum 3.19416457956544414e+13 compute time 10.902887
Application 1147783 resources: utime ~15s, stime ~15s, Rss ~8019820, inblocks ~762, outblocks ~1619

metrics checksum 1.27772353677617906e+14 compute time 5.861507
Application 1147784 resources: utime ~58s, stime ~26s, Rss ~5011272, inblocks ~3912, outblocks ~6956

metrics checksum 5.11100894647449750e+14 compute time 3.698334
Application 1147785 resources: utime ~176s, stime ~64s, Rss ~3241436, inblocks ~15624, outblocks ~26864

metrics checksum 2.04442683684379950e+15 compute time 3.344925
Application 1147786 resources: utime ~755s, stime ~192s, Rss ~2651680, inblocks ~62376, outblocks ~105536

#--------------------
# 3-way Czekanowski metric.
#--------------------

for compute_method in CPU GPU ; do
  aprun -n1 ./install_release/bin/genomics_metric \
      --num_field 1000 --num_vector_local 1000 --num_way 3 \
      --compute_method $compute_method --verbosity 1
  echo
done

metrics checksum 4.44761229736546641e+13 compute time 323.779124
Application 9464242 resources: utime ~334s, stime ~3s, Rss ~2611360, inblocks ~735, outblocks ~1560

metrics checksum 4.44761229736546641e+13 compute time 13.531170
Application 9464329 resources: utime ~37s, stime ~6s, Rss ~2790020, inblocks ~753, outblocks ~1560

#--------------------
# 3-way Czekanowski metric, all2all.
#--------------------

for p in 1 2 4 8 ; do
  aprun -n$p -N1 ./install_release/bin/genomics_metric \
        --num_field 2048 --num_vector_local $(( 128 * 6 / $p )) \
        --all2all yes --num_way 3 \
        --compute_method GPU --verbosity 1
  echo
done

metrics checksum 6-283811752468216928-988311188142008880 time 120.270341
Application 9637601 resources: utime ~176s, stime ~17s, Rss ~9777444, inblocks ~801, outblocks ~1693

metrics checksum 6-283811752468216928-988311188142008880 time 59.712863
Application 9637622 resources: utime ~176s, stime ~17s, Rss ~5018252, inblocks ~5450, outblocks ~3404

metrics checksum 6-283811752468216928-988311188142008880 time 31.447246
Application 9637629 resources: utime ~183s, stime ~20s, Rss ~2607756, inblocks ~14380, outblocks ~6789

metrics checksum 6-283811752468216928-988311188142008880 time 21.106007 ops 2.469071e+12 rate 1.169843e+11
Application 9637654 resources: utime ~222s, stime ~32s, Rss ~1383844, inblocks ~32240, outblocks ~13560

#--------------------
# 2-way CCC metric, all2all.
#--------------------

for p in 1 2 4 8 ; do
  aprun -n$p -N1 ./install_release/bin/genomics_metric \
        --metric_type ccc \
        --num_field 32768 --num_vector_local $(( 1024 * 6 / $p )) \
        --all2all yes --num_way 2 \
        --compute_method GPU --verbosity 1
  echo
done

metrics checksum 0-601335747387234782-436687494557262848 time 7.791593 ops 6.183746e+11 rate 7.936434e+10
Application 9731457 resources: utime ~16s, stime ~4s, Rss ~2761636, inblocks ~1304, outblocks ~2860

metrics checksum 0-601335747387234782-436687494557262848 time 3.469991 ops 6.183746e+11 rate 1.782064e+11
Application 9731458 resources: utime ~20s, stime ~5s, Rss ~1181988, inblocks ~6286, outblocks ~5732

metrics checksum 0-601335747387234782-436687494557262848 time 1.241129 ops 6.183746e+11 rate 4.982356e+11
Application 9731460 resources: utime ~16s, stime ~8s, Rss ~530896, inblocks ~16050, outblocks ~11457

metrics checksum 0-601335747387234782-436687494557262848 time 0.513437 ops 6.183746e+11 rate 1.204383e+12
Application 9731461 resources: utime ~16s, stime ~15s, Rss ~309528, inblocks ~35578, outblocks ~22896

#--------------------
# 3-way CCC metric, all2all.
#--------------------

for compute_method in CPU GPU ; do
  aprun -n3 -N1 ./install_release/bin/genomics_metric \
      --num_field 1000 --num_vector_local 60 --num_way 3 \
      --compute_method $compute_method --verbosity 1 --metric_type ccc
  echo
done

metrics checksum 0-484359406103121-765088343711521132 time 0.291193 ops 1.026600e+08 rate 3.525497e+08
Application 9985317 resources: utime ~0s, stime ~3s, Rss ~15024, inblocks ~12480, outblocks ~12156

metrics checksum 0-484359406103121-765088343711521132 time 0.051574 ops 1.026600e+08 rate 1.990538e+09
Application 9985318 resources: utime ~0s, stime ~3s, Rss ~167064, inblocks ~12534, outblocks ~12156

