diff -aur magma_mgemm5.cloned/Makefile.internal magma_mgemm5/Makefile.internal
--- magma_mgemm5.cloned/Makefile.internal	2019-02-26 09:23:34.222883000 -0500
+++ magma_mgemm5/Makefile.internal	2019-02-26 09:25:18.749094000 -0500
@@ -94,8 +94,8 @@
 #
 # See also $(info compile for ...) in Makefile
 #
-NV_SM    :=
-NV_COMP  :=
+#NV_SM    :=
+#NV_COMP  :=
 
 ifneq ($(findstring sm10, $(GPU_TARGET)),)
     # sm10 is no longer supported by CUDA 6.x nvcc
diff -aur magma_mgemm5.cloned/magma_mgemm5blas/gemm_stencil.cuh magma_mgemm5/magma_mgemm5blas/gemm_stencil.cuh
--- magma_mgemm5.cloned/magma_mgemm5blas/gemm_stencil.cuh	2019-02-26 09:23:33.079040000 -0500
+++ magma_mgemm5/magma_mgemm5blas/gemm_stencil.cuh	2019-02-27 08:05:00.355301000 -0500
@@ -138,6 +138,215 @@
 #define THR_M ( BLK_M / DIM_X )
 #define THR_N ( BLK_N / DIM_Y )
 
+//---BEGIN ADDED GENOMICS_METRICS
+//-----------------------------------------------------------------------------
+
+//http://docs.nvidia.com/cuda/cuda-math-api/group__CUDA__MATH__INTRINSIC__INT.html
+//__DEVICE_FUNCTIONS_DECL__ int __popc ( unsigned int  x )
+//Count the number of bits that are set to 1 in a 32 bit integer.
+//__DEVICE_FUNCTIONS_DECL__ int __popcll ( unsigned long long int x )
+//Count the number of bits that are set to 1 in a 64 bit integer.
+
+#if (version == trans_tn) && (precision == z)
+
+#define gm_popcount64(x) __popcll(x)
+
+extern "C" static __device__
+FloatingPoint_t mgemm5_compute(
+    FloatingPoint_t A,
+    FloatingPoint_t B,
+    FloatingPoint_t C)
+{
+    typedef unsigned long long int GMUInt64;
+    typedef GMUInt64 GMBits1_2x64;
+    typedef struct { GMBits1_2x64 data[2]; } GMBits2x64;
+    enum { GM_TALLY1_MAX_VALUE_BITS = 26 };
+    typedef struct { double data[2]; } GMTally2x2;
+
+    GMTally2x2 sum = *(GMTally2x2*)&C;
+
+    /*---Extract input values to process---*/
+
+    const GMBits2x64 vi = *(GMBits2x64*)&A;
+    const GMBits2x64 vj = *(GMBits2x64*)&B;
+
+#if 0
+    const GMUInt64 oddbits = 0x5555555555555555;
+
+    const GMUInt64& vi0 = vi.data[0];
+    const GMUInt64& vi1 = vi.data[1];
+    const GMUInt64& vj0 = vj.data[0];
+    const GMUInt64& vj1 = vj.data[1];
+
+    const GMUInt64 nvi0 = ~vi.data[0];
+    const GMUInt64 nvi1 = ~vi.data[1];
+    const GMUInt64 nvj0 = ~vj.data[0];
+    const GMUInt64 nvj1 = ~vj.data[1];
+    const GMUInt64 vij0_10mask1 = (vi0 | (nvi0 >> 1)) &
+                                  (vj0 | (nvj0 >> 1)) & oddbits;
+    const GMUInt64 vij1_10mask1 = (vi1 | (nvi1 >> 1)) &
+                                  (vj1 | (nvj1 >> 1)) & oddbits;
+    const GMUInt64 vij0_10mask = vij0_10mask1 | (vij0_10mask1<<1);
+    const GMUInt64 vij1_10mask = vij1_10mask1 | (vij1_10mask1<<1);
+
+    const GMUInt64 vi0m = vi0 & vij0_10mask;;
+    const GMUInt64 vi1m = vi1 & vij1_10mask;;
+    const GMUInt64 nvi0m = nvi0 & vij0_10mask;;
+    const GMUInt64 nvi1m = nvi1 & vij1_10mask;;
+
+    const GMUInt64 vj0s = ((vj0 >> 1) & oddbits) | ((vj0 & oddbits) << 1);
+    const GMUInt64 vj1s = ((vj1 >> 1) & oddbits) | ((vj1 & oddbits) << 1);
+
+    const GMUInt64 r01 = gm_popcount64(nvi0m &  vj0) +
+                         gm_popcount64(nvi0m &  vj0s) +
+                         gm_popcount64(nvi1m &  vj1) +
+                         gm_popcount64(nvi1m &  vj1s);
+
+    const GMUInt64 nvj0s = ~vj0s;
+    const GMUInt64 nvj1s = ~vj1s;
+
+    const GMUInt64 r00 = gm_popcount64(nvi0m & nvj0) +
+                         gm_popcount64(nvi0m & nvj0s) +
+                         gm_popcount64(nvi1m & nvj1) +
+                         gm_popcount64(nvi1m & nvj1s);
+
+    const GMUInt64 r10 = gm_popcount64( vi0m & nvj0) +
+                         gm_popcount64( vi0m & nvj0s) +
+                         gm_popcount64( vi1m & nvj1) +
+                         gm_popcount64( vi1m & nvj1s);
+
+    const GMUInt64 r11 = gm_popcount64( vi0m &  vj0) +
+                         gm_popcount64( vi0m &  vj0s) +
+                         gm_popcount64( vi1m &  vj1) +
+                         gm_popcount64( vi1m &  vj1s);
+
+    /*---Accumulate---*/
+
+    sum.data[0] += r00 | (r01 << GM_TALLY1_MAX_VALUE_BITS);
+    sum.data[1] += r10 | (r11 << GM_TALLY1_MAX_VALUE_BITS);
+#endif
+
+#if 1
+    //--------------------
+    // Nomenclature:
+    //
+    // ( )v(i)(0)_(0)
+    // (n)v(j)(1)_(1)
+    //  ^   ^  ^   ^
+    //  |   |  |   |--- lower or upper bit of each seminibble
+    //  |   |  |--- lower or upper word
+    //  |   |--- left or right vector
+    //  |---test for value or for its negative/complement
+    //--------------------
+
+    const GMUInt64 vi0 = vi.data[0];
+    const GMUInt64 vi1 = vi.data[1];
+    const GMUInt64 vj0 = vj.data[0];
+    const GMUInt64 vj1 = vj.data[1];
+
+    /*---Get mask to ignore vi seminibbles with value of 1,0---*/
+    /*---NOTE: check that this handles pad properly---*/
+
+    const GMUInt64 oddbits = 0x5555555555555555;
+
+    const GMUInt64 vij0_10mask = (vi0 | ~(vi0 >> 1)) &
+                                 (vj0 | ~(vj0 >> 1)) & oddbits;
+    const GMUInt64 vij1_10mask = (vi1 | ~(vi1 >> 1)) &
+                                 (vj1 | ~(vj1 >> 1)) & oddbits;
+
+    /*---Get even, odd bits for each semi-nibble, then mask---*/
+
+    const GMUInt64 vi0_0 =    vi0 & vij0_10mask;
+    const GMUInt64 vi1_0 =    vi1 & vij1_10mask;
+    const GMUInt64 vj0_0 =    vj0 & vij0_10mask;
+    const GMUInt64 vj1_0 =    vj1 & vij1_10mask;
+
+    /*---Get complements of the same bits, then mask---*/
+
+    const GMUInt64 nvi0_0 = ~ vi0 & vij0_10mask;
+    const GMUInt64 nvi1_0 = ~ vi1 & vij1_10mask;
+    const GMUInt64 nvj0_0 = ~ vj0 & vij0_10mask;
+    const GMUInt64 nvj1_0 = ~ vj1 & vij1_10mask;
+
+    const GMUInt64 r00 = gm_popcount64((nvi0_0 & nvj0_0) |
+                                     ( (nvi1_0 & nvj1_0) << 1 ));
+    const GMUInt64 r01 = gm_popcount64((nvi0_0 &  vj0_0) |
+                                     ( (nvi1_0 &  vj1_0) << 1 ));
+    const GMUInt64 r10 = gm_popcount64(( vi0_0 & nvj0_0) |
+                                     ( ( vi1_0 & nvj1_0) << 1 ));
+    const GMUInt64 r11 = gm_popcount64(( vi0_0 &  vj0_0) |
+                                     ( ( vi1_0 &  vj1_0) << 1 ));
+
+    /*---Accumulate---*/
+//printf("%i %i %i %i\n", (int)r00, (int)r01, (int)r10, (int)r11);
+
+    sum.data[0] += r00 | (r01 << GM_TALLY1_MAX_VALUE_BITS);
+    sum.data[1] += r10 | (r11 << GM_TALLY1_MAX_VALUE_BITS);
+#endif
+
+#if 0
+    //--------------------
+    // Nomenclature:
+    //
+    // ( )v(i)(0)_(0)
+    // (n)v(j)(1)_(1)
+    //  ^   ^  ^   ^
+    //  |   |  |   |--- lower or upper bit of each seminibble
+    //  |   |  |--- lower or upper word
+    //  |   |--- left or right vector
+    //  |---test for value or for its negative/complement
+    //--------------------
+
+    const GMUInt64 vi0 = vi.data[0];
+    const GMUInt64 vi1 = vi.data[1];
+    const GMUInt64 vj0 = vj.data[0];
+    const GMUInt64 vj1 = vj.data[1];
+
+    /*---Get mask to ignore vi seminibbles with value of 1,0---*/
+    /*---NOTE: check that this handles pad properly---*/
+
+    const GMUInt64 oddbits = 0x5555555555555555;
+
+    const GMUInt64 vi0_10mask = (vi0 | ~(vi0 >> 1)) & oddbits;
+    const GMUInt64 vi1_10mask = (vi1 | ~(vi1 >> 1)) & oddbits;
+
+    const GMUInt64 vj0_10mask = (vj0 | ~(vj0 >> 1)) & oddbits;
+    const GMUInt64 vj1_10mask = (vj1 | ~(vj1 >> 1)) & oddbits;
+
+    /*---Get even, odd bits for each semi-nibble, then mask---*/
+
+    const GMUInt64 vi0_0 =  vi0       & vi0_10mask;
+    const GMUInt64 vi1_0 =  vi1       & vi1_10mask;
+    const GMUInt64 vj0_0 =  vj0       & vj0_10mask;
+    const GMUInt64 vj1_0 =  vj1       & vj1_10mask;
+
+    /*---Get complements of the same bits, then mask---*/
+
+    const GMUInt64 nvi0_0 = ~ vi0       & vi0_10mask;
+    const GMUInt64 nvi1_0 = ~ vi1       & vi1_10mask;
+    const GMUInt64 nvj0_0 = ~ vj0       & vj0_10mask;
+    const GMUInt64 nvj1_0 = ~ vj1       & vj1_10mask;
+
+    const GMUInt64 r00 = gm_popcount64((nvi0_0 & nvj0_0) |
+                                     ( (nvi1_0 & nvj1_0) << 1 ));
+    const GMUInt64 r01 = gm_popcount64((nvi0_0 &  vj0_0) |
+                                     ( (nvi1_0 &  vj1_0) << 1 ));
+    const GMUInt64 r10 = gm_popcount64(( vi0_0 & nvj0_0) |
+                                     ( ( vi1_0 & nvj1_0) << 1 ));
+    const GMUInt64 r11 = gm_popcount64(( vi0_0 &  vj0_0) |
+                                     ( ( vi1_0 &  vj1_0) << 1 ));
+
+    /*---Accumulate---*/
+//printf("%i %i %i %i\n", (int)r00, (int)r01, (int)r10, (int)r11);
+
+    sum.data[0] += r00 | (r01 << GM_TALLY1_MAX_VALUE_BITS);
+    sum.data[1] += r10 | (r11 << GM_TALLY1_MAX_VALUE_BITS);
+#endif
+
+    return *(FloatingPoint_t*)&sum;
+}
+#endif
+
 ///////////////////////////////////////////////////////////////////////////////////////////////////
 extern "C" static __device__
 void devfunc_name(precision) (
@@ -344,7 +553,13 @@
                       #ifdef CONJ_B
                         fma(rA[m], conj(rB[n]), rC[n][m]);
                       #else
-                        fma(rA[m], rB[n], rC[n][m]);
+                        //---BEGIN MODIFIED GENOMICS_METRICS
+                        #if (version == trans_tn) && (precision == z)
+                          rC[n][m] = mgemm5_compute(rA[m], rB[n], rC[n][m]);
+                        #else
+                          fma(rA[m], rB[n], rC[n][m]);
+                        #endif
+                        //---END MODIFIED GENOMICS_METRICS
                       #endif
                     #endif
                 }
@@ -419,7 +634,13 @@
                   #ifdef CONJ_B
                     fma(rA[m], conj(rB[n]), rC[n][m]);
                   #else
-                    fma(rA[m], rB[n], rC[n][m]);
+                    //---BEGIN MODIFIED GENOMICS_METRICS
+                    #if (version == trans_tn) && (precision == z)
+                      rC[n][m] = mgemm5_compute(rA[m], rB[n], rC[n][m]);
+                    #else
+                      fma(rA[m], rB[n], rC[n][m]);
+                    #endif
+                    //---END MODIFIED GENOMICS_METRICS
                   #endif
                 #endif
             }
diff -aur magma_mgemm5.cloned/magma_mgemm5blas/zgemm_fermi.cu magma_mgemm5/magma_mgemm5blas/zgemm_fermi.cu
--- magma_mgemm5.cloned/magma_mgemm5blas/zgemm_fermi.cu	2019-02-26 09:23:33.720878000 -0500
+++ magma_mgemm5/magma_mgemm5blas/zgemm_fermi.cu	2019-02-26 21:43:30.427006000 -0500
@@ -275,6 +275,7 @@
     else if ( TransA == 1 && TransB == 0 ) {
         dim3 dimGrid( (m - 1)/BLK_M_tn + 1,
                       (n - 1)/BLK_N_tn + 1 );
+//printf("%i %i  %i %i\n", (int)DIM_X, (int)DIM_Y, (int)((m - 1)/BLK_M_tn + 1), (int)((n - 1)/BLK_N_tn + 1));
         zgemm_kernel_fermi_tn<<< dimGrid, dimBlock, 0, magma_mgemm5_stream >>>(
             m, n, k, dA, ldda, dB, lddb, dC, lddc, alpha, beta,
             (int)offsetA, (int)offsetB );
