##########################################
Overview:
This document contains notes on the 1-bit GEMM kernels and related changes made to CoMet. This includes additional input options, GEMM implementations, other implementation notes, and notes on planned changes.


##########################################
Input options:
--num_kernel <int> - Choose kernel number for routines that have multiple otpions
--print_details <yes/no> - Print additional details about each run


##########################################
GEMMs:
no tc:
  * CoMet GEMM kernels with original approach:
    0: Default Magma kernel - Doesn't call due to invalid problem for this system and build:
       linalg.cc        - gemm_start (Calls different non-tc GEMMs)
       magma_wrapper.cc - gemm_start
                        - gemm_block_start
                          * magma_mgemm5blas_zgemm

    1: Simple WMMA CoMet kernel:
       linalg.cc           - gemm_start (Calls different non-tc GEMMs)
       tc.cc               - tc_gemm_comet_start
       tc_solve_comet.i.hh - tc_solve_comet_ (Calls non-tc non-magma GEMMs)
                             * b1_comet_gemm_gpu_simple

tc 1:
  * Non-B1 GEMMs
    0: Cublas - Works:
       linalg.cc     - gemm_start
       tc.cc         - tc_gemm_start
                     - tc_gemm_start_impl_ (Calls tc_in/tc_out)
       tc_solve.i.hh - tc_solve_
                     - tc_solve_impl (Calls different TC GEMMs)
                       * cublasGemmEx

tc 5:
  * Cutlass device-level Xor B1 GEMMs
    11-49: Various different template parameters - Works (17):
      linalg.cc     - gemm_start
      tc.cc         - tc_gemm_start
                    - tc_gemm_start_impl_ (Calls tc_in/tc_out)
      tc_solve.i.hh - tc_solve_
                    - tc_solve_impl
                    - tc_solve_impl_subbyte (Calls different b1 solves)
                      * CutlassTCGemm1B (Different template parameter options)
                      
  * Cutlass device-level Mult B1 GEMMs
    50-99: Various different template parameters - Works (50)
      linalg.cc     - gemm_start
      tc.cc         - tc_gemm_start
                    - tc_gemm_start_impl_ (Calls tc_in/tc_out)
      tc_solve.i.hh - tc_solve_
                    - tc_solve_impl
                    - tc_solve_impl_subbyte (Calls different b1 solves)
                      * CutlassTCGemm1B (Different template parameter options)

  * Cutlass warp-level Xor B1 GEMMs
    100-124: Various different warp-level xor double GEMMs - Errors (100, 103)
      linalg.cc               - gemm_start
      tc.cc                   - tc_gemm_start
                              - tc_gemm_comet_start_impl_ (Call tc_out)
                              - tc_solve_comet_ (Call xor or mult)
      tc_solve_comet_xor.i.hh - tc_solve_comet_xor_impl (Calls different warp-level xor double GEMMs)
                                * 100 - b1_comet_xor_gemm_gpu_simple
                                * 101 - b1_comet_xor_gemm_gpu_tc_simple
                                * 102 - b1_comet_xor_gemm_gpu_tc_opt
                                * 103 - tc_solve_comet_impl_cutlass

    125-149: Various different warp-level xor int GEMMs
      linalg.cc                   - gemm_start
      tc.cc                       - tc_gemm_start
                                  - tc_gemm_comet_start_int_impl_ (Call tc_out)
                                  - tc_solve_comet_int_ (Call xor or mult)
      tc_solve_comet_xor_int.i.hh - tc_solve_comet_int_impl (Calls different warp-level xor int GEMMs)
                                    * 125 - b1_comet_xor_gemm_gpu_int_simple
                                    * 126 - tc_solve_comet_impl_cutlass_int

  * Cutlass warp-level Mult B1 GEMMs
    150-174: Various different warp-level mult double GEMMs
      linalg.cc               - gemm_start
      tc.cc                   - tc_gemm_start
                              - tc_gemm_comet_start_impl_ (Call tc_out)
                              - tc_solve_comet_ (Call xor or mult)
      tc_solve_comet_xor.i.hh - tc_solve_comet_mult_int_impl (Calls different warp-level mult double GEMMs)
                                * 150 - b1_comet_mult_gemm_gpu_simple

    175-199: Various different warp-level mult int GEMMs
      linalg.cc                    - gemm_start
      tc.cc                        - tc_gemm_start
                                   - tc_gemm_comet_start_int_impl_ (Call tc_out)
                                   - tc_solve_comet_int_ (Call xor or mult)
      tc_solve_comet_mult_int.i.hh - tc_solve_comet_mult_int_impl (Calls different warp-level mult int GEMMs)
                                     * 175 - Placeholder      


  * 1-bit WMMA xor general GEMM kernels (tc_solve_general.i.hh):
    0: Very simple 1-bit GEMM (b1_xor_gemm_gpu)
      - Basic approach to develop CoMet 1-bit xor GEMM code
    1: Simple tensor core 1-bit GEMM (b1_xor_gemm_gpu_tc_simple)
      - Simple approach to demonstrate CoMet can use tensor cores
    2: Very simple shared memory 1-bit GEMM (b1_xor_gemm_gpu_tc_sm)
      - Simple approach to demonstrate tensor cores can use shared memory
      - Needs to read larger blocks and loop over them to actually improve performance
    30: Place holder to experiment with different pre and post processing routines

  * 1-bit WMMA xor CoMet GEMM kernels (tc_solve_comet_xor.i.hh)
    20: Simple GEMM that returns int array (b1_comet_xor_gemm_gpu_int_simple)
      - Need to shuffle output array differently to get this to produce correct solution
    21: Simple xor GEMM (b1_comet_xor_gemm_gpu_simple)
      - Does not need tc_in or tc_out kernels
    22: Simple xor tensor core GEMM (b1_comet_xor_gemm_gpu_tc_simple)
      - Very simple working 1-bit tensor core GEMM
    23: In development Cutlass optimized xor tensor core GEMMs
      - In progress, unlikely to outperform Nvidia version
    24: Optimized Cutlass warp-level tensor core GEMMs from Nvidia
      - Fairly optimized Nvidia code with best performance
    25: Placeholder for experimenting with warp-level tensor core GEMM that outputs ints


##########################################
Implementation Notes:
In setup routines primarily use env.num_kernel()<20 for general GEMMs and env.num_kernel()>=20 for CoMet GEMMs to differentiate between the two types of GEMMs. Will likely pick fastest kernels later for master version of CoMet.

Have compile and run scripts. Run scripts have options to run accuracy tests and run performance tests. However this is not currently in repo.

Modified setup to automically install Cutlass from tar file and setup CoMet to use Cutlass.

Added test code to output input files to use for testing.

##########################################
Planned changes:
- Add option to choose between sync and unsync timers
- Setup code to compute min/avg/max across all processes for timings
- Explore modifying warp-level Cutlass GEMM to use single mma call and store int result.
- Add additional performance analysis code for communication and i/o routines.

In progress:
- Add tests to driver_test.cc for various 1-bit and Cutlass kernels. Identify cases where they work correctly and when they do not, including checking corner cases.
  - Nvidia warp-level GEMM fails to produce correct solution, however running standalone tests says the result is correct
- Explore 3-way duo methods using 3-way scaling test as example
  - Test code doesn't actually call 3-way duo method - uses !is_duo for all calls

Potential changes:
- Explore approaches for developing faster tc_in/tc_out routines.

##########################################

